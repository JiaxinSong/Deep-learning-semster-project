import numpy as np
import openpyxl
from openpyxl import Workbook, load_workbook


def counting(d1, s2, d2, f):  # d2=k
    ops = s2 * s2 * f * f * d1 * d2 * 2
    par = f * f * d1 * d2
    return ops, par

def memoryL(s2,d2):
    m=s2*s2*d2*4
    return m


def counting2(s2, d2):
    ops = d2 * s2 * s2
    par = 0
    return ops, par


def main():
    x = []
    y = []
    z=[]
    wb = load_workbook('document1.xlsx')

    layer = [[3, 608, 32, 3, 1, 0],
             [32, 304, 64, 3, 2, 0],
             [64, 304, 32, 1, 1, 0],
             [32, 304, 64, 3, 1, 0],
             [64, 304, 64, 0, 0, 1],
             [64, 152, 128, 3, 2, 0],
             [128, 152, 64, 1, 1, 0],
             [64, 152, 128, 3, 1, 0],
             [128, 152, 128, 0, 0, 1],
             [128, 152, 64, 1, 1, 0],
             [64, 152, 128, 3, 1, 0],
             [128, 152, 128, 0, 0, 1],
             [128, 76, 256, 3, 2, 0],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 76, 128, 1, 1, 0],
             [128, 76, 256, 3, 3, 0],
             [256, 76, 256, 0, 0, 1],
             [256, 38, 512, 3, 2, 0],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 512, 0, 0, 1],
             [512, 19, 1024, 3, 2, 0],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 1024, 0, 0, 1],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 1024, 0, 0, 1],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 1024, 0, 0, 1],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 1024, 0, 0, 1],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 512, 1, 1, 0],
             [512, 19, 1024, 3, 1, 0],
             [1024, 19, 18, 1, 1, 0],

             [512, 19, 256, 1, 1, 0],
             [256, 38, 256, 0, 0, 2],
             [256, 38, 768, 0, 0, 3],
             [768, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 256, 1, 1, 0],
             [256, 38, 512, 3, 1, 0],
             [512, 38, 18, 1, 1, 0],
             [256,38,128,1,1,0],
             [128,76,128,0,0,2],
             [128,76,384,0,0,3],

             [384,76,128,1,1,0],
             [128,76,256,3,1,0],
             [256,76,128,1,1,0],
             [128,76,256,3,1,0],
             [256,76,128,1,1,0],
             [128,76,256,3,1,0],
             [256,76,255,1,1,0],

             ]


    ws2 = wb.create_sheet("counting3")

    p = 2
    for i in layer:
        if i[5] == 0:
            a, b = counting(i[0], i[1], i[2], i[3])
            c=memoryL(i[1], i[2])
            x.append(a)
            y.append(b)
            z.append(c)
            ps = str(i[3])
            st = str(i[4])
            os = str(i[1])
            od = str(i[2])
            r = ws2.cell(row=p, column=1, value='convolution')
            v = ws2.cell(row=p, column=2, value=ps + '*' + ps + '/' + st)
            u = ws2.cell(row=p, column=3, value=os + '*' + os + '*' + od)
            d = ws2.cell(row=p, column=5, value=a)
            o = ws2.cell(row=p, column=4, value=b)
            t = ws2.cell(row=p, column=6, value=c)
            p = p + 1
        if i[5] == 1:
            a, b = counting2(i[1], i[2])
            x.append(a)
            y.append(b)
            z.append(c)
            c = memoryL(i[1], i[2])
            ps = str(i[3])
            st = str(i[4])
            os = str(i[1])
            od = str(i[2])
            l = ws2.cell(row=p, column=1, value='sum')
            u = ws2.cell(row=p, column=3, value=os + '*' + os + '*' + od)
            d = ws2.cell(row=p, column=5, value=a)
            o = ws2.cell(row=p, column=4, value=b)
            t = ws2.cell(row=p, column=6, value=c)
            p = p + 1
        if i[5]==2:
            a=0
            b=0
            x.append(a)
            y.append(b)
            z.append(c)
            c = memoryL(i[1], i[2])
            ps = str(i[3])
            st = str(i[4])
            os = str(i[1])
            od = str(i[2])
            l = ws2.cell(row=p, column=1, value='upsample')
            u = ws2.cell(row=p, column=3, value=os + '*' + os + '*' + od)
            d = ws2.cell(row=p, column=5, value=a)
            o = ws2.cell(row=p, column=4, value=b)
            t = ws2.cell(row=p, column=6, value=c)
            p = p + 1

        if i[5]==3:
            a=0
            b=0
            x.append(a)
            y.append(b)
            z.append(c)
            c = memoryL(i[1], i[2])
            ps = str(i[3])
            st = str(i[4])
            os = str(i[1])
            od = str(i[2])
            l = ws2.cell(row=p, column=1, value='concat')
            u = ws2.cell(row=p, column=3, value=os + '*' + os + '*' + od)
            d = ws2.cell(row=p, column=5, value=a)
            o = ws2.cell(row=p, column=4, value=b)
            t = ws2.cell(row=p, column=6, value=c)
            p = p + 1
    wb.save('document1.xlsx')


if __name__ == "__main__":
    main()